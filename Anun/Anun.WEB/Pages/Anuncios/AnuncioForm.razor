@using Anun.SHARED.Entities
@inject SweetAlertService swal

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm EditContext="editContext" OnSubmit="OnSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Nombre:</label>
        <InputText @bind-Value="Anuncio.Nombre" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.Nombre)" />
    </div>

    <div class="mb-3">
        <label>Tipo:</label>
        <InputText @bind-Value="Anuncio.Tipo" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.Tipo)" />
    </div>

    <div class="mb-3">
        <label>Contenido:</label>
        <InputText @bind-Value="Anuncio.contenido" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.contenido)" />
    </div>

    <div class="mb-3">
        <label>Titular:</label>
        <InputText @bind-Value="Anuncio.Titular" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.Titular)" />
    </div>

    <div class="mb-3">
        <label>Categoría:</label>
        <InputText @bind-Value="Anuncio.Categoria" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.Categoria)" />
    </div>

    <div class="mb-3">
        <label>Precio:</label>
        <InputNumber @bind-Value="Anuncio.precio" class="form-control" />
        <ValidationMessage For="@(() => Anuncio.precio)" />
    </div>

    <button class="btn btn-primary" type="submit">Guardar</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Anuncio);
    }

    [EditorRequired]
    [Parameter]
    public Anuncio Anuncio { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();
        if (!formWasEdited) return;

        if (FormPostedSuccessfully) return;

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm) return;

        context.PreventNavigation();
    }
}